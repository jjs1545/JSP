/**
 * 몽고디비 연동 app.js 서버
 */


var express = require('express')
  , http = require('http')
  , path = require('path');


var bodyParser = require('body-parser')
  , cookieParser = require('cookie-parser')
  , stat = require('serve-static')
  , errorHandler = require('errorhandler');

var expressErrorHandler = require('express-error-handler');
var expressSession = require('express-session');
var crypto = require('crypto');
var user = require('./routes/user');


var config = require('./config');
var database_loader = require('./database/database_loader');
var route_loader = require('./routes/route_loader');

//pasaport 사용
var passport = require('passport');
var flash = require('connect-flash');

var app = express();

app.set('views',__dirname + '/views');
app.set('view engine', 'ejs');

console.log('config.server_port-> ' + config.server_port);
app.set(config.server_port||3000)
app.use(bodyParser.urlencoded({ extended: false }))
app.use(bodyParser.json())

/*폴더 경로 찾기 위한 static --> stat (static은 자바 키워드 이므로 stat으로 변경했습니다.*/
app.use('/public', stat(path.join(__dirname, 'public')));
app.use('/home', stat(path.join(__dirname, 'home')));
app.use('/img', stat(path.join(__dirname, 'img')));
app.use('/css', stat(path.join(__dirname, 'css')));
app.use('/main', stat(path.join(__dirname, 'main')));
app.use('/controller', stat(path.join(__dirname, 'controller')));


/*=======몽고 디비를 활용한 이미지 저장 및 출력========*/
var Client = require('mongodb').MongoClient;
Client.connect('mongodb://localhost:27017/local', function(error, db){
    if(error) {
        console.log(error);
    } else {
        console.log("connected:"+db);
        db.close();
    }
});

var mongojs = require('mongojs'); // MongoDB 연결 해야되니 MongoJS 모듈도 추가
var db = mongojs('local', ['images']); // 여기서 genie는 database 이름이고 images테이블을 사용할꺼라고 선언

app.use(express.static(__dirname + '/public')); //public 폴더 안에 javascript 파일과 css파일을 모아둘 예정
var formidable = require('formidable'); // form 태그 데이터들을 가져오는 모듈
var fs = require('fs-extra'); // 파일을 복사하거나 디렉토리 복사하는 모듈

app.set('views', __dirname + '/views'); // ejs 파일들을 저장하기 위해 경로 추가했음
app.set('view engine', 'ejs'); // ejs를 html로 바꿔주면 html로 파일 실행됩니다.


app.get('/imgadd', function(req, res) { // 웹에서 실행할 주소가 localhost:3000/ 이거일때를 선언
    res.render('imgadd'); // index.ejs로 써도 되고 index만 써도 파일 실행을 해줍니다.
});

app.post('/upload',function(req,res){ 
	var num = "";
	var name = "";
    var city = "";
    var hname = "";
    var filePath = "";
    var latitude ="";
    var longitude ="";
    var form = new formidable.IncomingForm();
    form.parse(req, function(err, fields, files) {
        num = fields.num;
    	name = fields.name;
        city = fields.city;
        hname = fields.hname;
        latitude = fields.latitude;
        longitude = fields.longitude;
    });
    form.on('end', function(fields, files) {
	  for (var i = 0; i < this.openedFiles.length; i++) {
	  var temp_path = this.openedFiles[i].path;
	            var file_name = this.openedFiles[i].name;
	            var index = file_name.indexOf('/'); 
	            var new_file_name = file_name.substring(index + 1);
	            var new_location = 'public/resources/images/'+name+'/';
	            var db_new_location = 'resources/images/'+name+'/';
	            //실제 파일 저장 경로, db 저장 경로
	            filePath = db_new_location + file_name;
	            fs.copy(temp_path,new_location + file_name, function(err) { // 이미지 파일 저장
	                if (err) {
	                    console.error(err);
	                }
	            });
	  }
		db.images.insert({"num":num,"name":name ,"city":city,"hname":hname,"filePath":filePath, "latitude":latitude, "longitude":longitude },function(err,doc){
		//디비에 저장
		});
  });
  
   res.redirect("/imgadd"); 

});


app.get('/jebal',function(req, res) {
	 var search = req.query.search;
	 console.log('search:'+search);
	 res.render('addImg');
});

app.get('/file',function(req,res){ //몽고디비에서 filePath 와 name을 불러옴
	db.images.find(/*{"name":"일본"},*/function(err,doc){
		res.json(doc);
		if(doc) {
			console.dir("img:"+doc);
		}
	});
});
/*=====================================*/

app.use(cookieParser()); 
app.use(expressSession({
	secret:'my key',
	resave:true,
	saveUninitialized:true
}));

//passport 초기화
app.use(passport.initialize());
app.use(passport.session());

app.use(flash());


//passport strategy 설정
var LocalStrategy = require('passport-local').Strategy;
var FacebookStrategy = require('passport-facebook').Strategy;

passport.use('local-login', new LocalStrategy({
	usernameField:'id',	//passport에서 요청파라미터는 username과 password로 보내진다고 전제한다.
							//그러므로 설정한 email과 password로 변경하는 작업.
	passwordField:'password',
	passReqToCallback: true
}, function(req, id, password, done) {
	//로컬 인증하는 코드
	console.log('passport의 local-login 호출됨 : ' +  id + ', ' + password);
	
	var database = app.get('database');
	database.UserModel.findOne({'id':id}, function(err, user) {	//findOne : 데이터 검색
		if(err) {
			console.log('에러 발생함');
			return done(err);
		}
		
		if(!user) {
			console.log('사용자 아이디가 일치하지 않습니다.');
			return done(null, false, req.flash('loginMessage', '등록된 계정이 없습니다.'));
		}
		
		var authenticated = user.authenticate(password, user._doc.salt, user._doc.hashed_password);
		
		if(!authenticated) {
			console.log('비밀번호가 일치하지않습니다.');
			return done(null, false, req.flash('loginMessage', '비밀번호가 일치하지 않습니다.'));
		}
		
		console.log('아이디와 비밀번호가 일치합니다.');
		return done(null, user);
	}); 
}));

passport.use('local-signup', new LocalStrategy({
	usernameField:'id',
	passwordField:'password',
	passReqToCallback: true
}, function(req, id, password, done) {
	var paramName = req.body.name || req.query.name;
	console.log('passport의 local-signup 호출됨 : ' + id + ', ' + password + ', ' + paramName);
	
	var database = app.get('database');
	database.UserModel.findOne({'id':id}, function(err, user) {
		if(err) {
			console.log('에러 발생');
			return done(err);
		}
		
		if(user) {
			console.log('기존에 계정이 있습니다.');
			return done(null, false, req.flash('signupMessage', '계정이 이미 있습니다.'));
		} else {
			var user = new database.UserModel({'id':id, 'password':password, 'name':paramName});
			user.save(function(err) {
				if(err) {
					console.log('데이터베이스에 저장 시 에러');
					return done(null, false, req.flash('signupMessage', '사용자 정보 저장 시 에러가 발생했습니다.'));
				}
				
				console.log('사용자 데이터 저장됨');
				return done(null, user);
			});
		}
	});
}));

passport.use('facebook', new FacebookStrategy({
	clientID : config.facebook.clientID,
	clientSecret : config.facebook.clientSecret,
	callbackURL : config.facebook.callbackURL,
	profileFields : ['id', 'email', 'name', 'displayName']
	}, function(accessToken, refreshToken, profile, done) {
		console.log('passport의  facebook 호출됨.');
		console.dir(profile);
		
		var options = {
				criteria : {'facebook.id' : profile.id}
		};
		
		var database = app.get('database');
		//database.UserModel.load(options, function (err, user) {
		database.UserModel.findOne(options, function (err, user) {
			if(err) return done(err);
			
			if(!user) {
				var user = new database.UserModel({
					name : profile.displayName,
					//email : profile.id,
					id : profile.emails[0].value,
					provider : 'facebook',
					facebook : profile._json
				}); 
				
				user.save(function(err) {
					if(err) console.log('err');
					return done(err, user);
				});
			} else {
				return done(err, user);
			}
		});
	})
);

//인증 성공시 호출됨.
passport.serializeUser(function(user, done) {	
	console.log('serializeUser 호출됨.');
	console.dir(user);
	
	done(null, user);
});


passport.deserializeUser(function(user, done) {
	console.log('deserizlizeUser 호출됨.');
	console.dir(user);
	
	done(null, user);
});

//====user, post 라우팅 설정====
var router = express.Router();
route_loader.init(app, router);
//route_loader.init(app, express.Router());

//write.ejs 라우팅
router.route('/write').get(function(req, res) {
	console.log('/write 패스로 요청됨.');
	
	res.render('write.ejs');	//index.ejs에 있는 것을 클라이언트로 보내준다.
								//render : 미리 만들어진 페이지를 전송
});

/*//예약 처리 라우팅
router.route('/process/reserve').get(function(req, res) {
	console.log('/process/reserve 패스로 요청됨.');
	res.render('addImg.ejs');
	
	var num = "";
	var name = "";
    var city = "";
    var hname = "";
    var form = new formidable.IncomingForm();
    form.parse(req, function(err, fields, files) {
        num = fields.num;
    	name = fields.name;
        city = fields.city;
        hname = fields.hname;
    });
    form.on('end', function(fields, files) {
    	db.reserve.insert({"num":num,"name":name ,"city":city,"hname":hname},function(err,doc){
    		//디비에 저장
    });
    });
    res.redirect("/addImg"); 
    //render : 미리 만들어진 페이지를 전송
});
*/

//index.ejs 라우팅
router.route('/index').get(function(req, res) {
	console.log('/index 패스로 요청됨.');
	
	res.render('index.ejs');	//index.ejs에 있는 것을 클라이언트로 보내준다.
								//render : 미리 만들어진 페이지를 전송
});



router.route('/index2').get(function(req, res) {
	console.log('/index2 패스로 요청됨.');
	
	res.render('index2.ejs');	
	
});

//메인화면
router.route('/').get(function(req, res) {
	console.log('/ 패스로 요청됨.');
	
	res.render('start.ejs');	//index.ejs에 있는 것을 클라이언트로 보내준다.
								//render : 미리 만들어진 페이지를 전송
});

router.route('/login').get(function(req, res) {
	console.log('/login 패스 GET 요청됨.');
	
	res.render('login.ejs', {message: req.flash('loginMessage')});
});


router.route('/login').post(passport.authenticate('local-login', {	//로그인 인증을 진행하고 싶다!!
	successRedirect : '/index2',
	failureRedirect : '/login',
	failureFlash: true
}));

/*router.route('/login').post(passport.authenticate('local-login', {	//로그인 인증을 진행하고 싶다!!
	successRedirect : '/home/index.html',
	failureRedirect : '/login',
	failureFlash: true
}));*/

router.route('/signup').get(function(req, res) {
	console.log('/signup 패스 GET 요청됨.');
	
	res.render('signup.ejs', {message: req.flash('signupMessage')});
});
		
/*router.route('/signup').post(passport.authenticate('local-signup', {	
	successRedirect : '/profile',
	failureRedirect : '/signup',
	failureFlash: true
}));*/
router.route('/signup').post(passport.authenticate('local-signup', {	
	successRedirect : '/index',
	failureRedirect : '/signup',
	failureFlash: true
}));

router.route('/profile').get(function(req, res) {
	console.log('/profile 패스로 GET 요청됨.');
	
	console.log('req.user 객체 정보');
	console.dir(req.user);
	
	if(!req.user) {
		console.log('사용자 인증 안된 상태임');
		res.redirect('/');
	} else {
		console.log('사용자 인증된 상태임');
		
		if(Array.isArray(req.user)) {
			res.render('profile.ejs', {user:req.user[0]._doc});
		} else {
			res.render('profile.ejs', {user:req.user});
		}
	}
});

router.route('/logout').get(function(req, res) {
	console.log('/logout 패스로 GET 요청됨.');
	
	req.logout();
	res.redirect('/index');
	/*res.redirect('/');*/
});


router.get('/auth/facebook', passport.authenticate('facebook', {
	scope : 'email'
}));

//페이스북 인증 콜백 라우팅 
router.route('/auth/facebook/callback').get(passport.authenticate('facebook', {
	successRedirect : '/index2',
	failureRedirect : '/'
}));


var errorHandler = expressErrorHandler({
 static: {
   '404': './public/404.html'
 }
});

app.use( expressErrorHandler.httpError(404) );
app.use( errorHandler );

//===== 서버 변수 설정 및 static으로 [Public] 폴더 설정 =====//
console.log('config.server_port:%d', config.server_port);
app.set('port',process.env.PORT||config.server_port);



//===== 서버 시작 =====//
process.on('SIGTERM', function () {
    console.log("프로세스가 종료됩니다.");
    app.close();
});

app.on('close', function () {
	console.log("Express 서버 객체가 종료됩니다.");
	if (database) {
		database.close();
	}
});

http.createServer(app).listen(app.get('port'), function(){
  console.log('서버가 시작되었습니다. 포트 : ' + app.get('port'));
  //connectDB();
  database_loader.init(app, config); //데이터베이스 연결
});

